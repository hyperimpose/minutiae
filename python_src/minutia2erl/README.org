#+OPTIONS: ^:nil

* libminutia

*This library is an internal part of minutia and its API may change without maintaining backwards compatibility*

libminutia handles the data and metadata retrieval part of minutia. It can be used as a standalone library in
Python projects.

** Features

- Supported protocols: HTTP
- Customized extraction mechanisms for various services.
- Calculates a TTL value that can be used for caching.
- Supports multiple languages.
- Built with Python async.
- Includes tests that can be used to ensure that each service is parsed properly.

- [media] Supports many content types: HTML, PDF, PNG, JPEG, MP3, ACC, FLAC and more.
- [explicit] Detects explicit content using metadata and ML models.

** Usage

Before this library can be used, it must be initialized. After initialization it can then be configured.
When you are done using it, you should also terminate it.

Below is a simple example of how to use the library:
#+BEGIN_SRC python
  import asyncio
  import libminutia

  async def main():
      # Initialize
      await libminutia.init()

      # Configure
      libminutia.set_lang("en-GB")
      libminutia.set_max_filesize(6_553_500)  # 6.5 MB in bytes

      # Use the library
      "ok", data = await libminutia.http.get("http://hyperimpose.org")

      # `data' will be a dictionary like:
      # {
      #     "@": "http:html",
      #     "t": "This is the title of the page"
      # }

      # Terminate
      await libminutia.terminate()

  asyncio.run(main())
#+END_SRC

** Installation

You can install this library using pip:
#+BEGIN_SRC sh
  pip install "git+https://github.com/hyperimpose/minutia.git@master#subdirectory=python_src/libminutia"
#+END_SRC

*** Optional Dependencies
Some of the features listed above are optional. You can tell pip which optional features you want installed by
using the syntax ~[media,explicit]~ after the installation url:

#+BEGIN_SRC sh
  pip install "git+https://github.com/hyperimpose/minutia.git@master#subdirectory=python_src/libminutia"[media]
#+END_SRC

The availability of those dependencies is checked once when libminutia is imported.
When an optional dependency is missing the library will log a warning to inform you about the fact.

Table of available optional features:
|----------+------------------------------------------------------------------------------|
| Name     | Description                                                                  |
|----------+------------------------------------------------------------------------------|
| media    | Extract extra information from various media files.                          |
| explicit | Detect explicit content using a Machine Learning model. (see [[Warnings][warnings]] first) |
|----------+------------------------------------------------------------------------------|

**** Warnings
The ~explicit~ flag will install tensorflow which has the following caveats:
- Increased installation size.
- When the library is started for the first time it will need to download and cache the ML model.
- *Tensorflow requires a CPU with AVX support* :: If this requirement is not met the library will
  crash and show this message: ~Illegal Instruction~.

*** Runtime Dependencies
Extra features may be enabled based on the availability of other programs. These programs can be installed on
the host OS separately from libminutia.

The availability of those dependencies is checked once when libminutia is imported.
When a runtime dependency is missing the library will log a warning to inform you about the fact. 

Table of available runtime dependencies:
|---------+----------------------------------------------------------------------------------------|
| Name    | Description                                                                            |
|---------+----------------------------------------------------------------------------------------|
| ffmpeg  | Only useful with the ~explicit~ feature enabled. Enables explicit detection of videos. |
| ffprobe | MUST be installed with ~ffmpeg~.                                                       |
|---------+----------------------------------------------------------------------------------------|

** API

*** libminutia

**** Initialization / Termination

|-------------------+-----------------------|
| Callable          | Description           |
|-------------------+-----------------------|
| async init()      | Intialize the library |
| async terminate() | Terminate the library |
|-------------------+-----------------------|

**** Configuration

|-----------------------------+------------------------------------------------------------+---------|
| Callable                    | Description                                                | Default |
|                             |                                                            |         |
|-----------------------------+------------------------------------------------------------+---------|
| set_http_useragent(ua: str) | The useragent to use when making HTTP requests.            |         |
| set_lang(lang: str)         | The default language to request content in. The value      | "en"    |
|                             | is passed in HTTP headers such as Accept-Language.         |         |
| set_max_filesize(i: int)    | The max number of bytes to download for deep inspecion of  | 14_600  |
|                             | supported media files. Set to <= 0 to disable the feature. |         |
| set_max_htmlsize(i: int)    | The max bytes to download when parsing HTML pages.         | 14_600  |
|-----------------------------+------------------------------------------------------------+---------|

*** libminutia.http

This module is used when working with HTTP/HTTPS links.

|--------------------------------------+--------------------------------------------------------------|
| Callable                             | Description                                                  |
|--------------------------------------+--------------------------------------------------------------|
| async get(link: str, lang: str = "") | Visit the link and return information about it. If `lang' is |
|                                      | given then it will be used instead of the default lang set.  |
|--------------------------------------+--------------------------------------------------------------|

*** Logging

libminutia is using the ~logging~ module to log various events. Everything is logged under the ~libminutia~
logger.

When the library is imported it might log information about the availability of various features. If you want
to capture those you must configure logging in your application before importing libminutia.

** Developer Notes

The library has an extra installation option ~dev~ to be used during development. It is built using Flit.

You can setup a development environment with all the dependencies by running the following:
#+BEGIN_SRC sh
  python -m venv venv
  source venv/bin/activate
  pip install flit
  flit install
#+END_SRC

*** Project Structure
libminutia is split in two parts:
1) a standalone Python library (referred to as libminutia)
2) a Python application implementing an Erlang port

The Erlang port is made up from the files ~__main__.py~ and ~erlang.py~. It only depends on libminutia and the
Python standard library.

Everything else implements the standalone library. The library is meant to be installed using pip.
~pyproject.toml~ creates an installable Python package for just the library (it does not include the Erlang
port).

** License

libminutia is licensed under the [[https://www.gnu.org/licenses/agpl-3.0.html][GNU Affero General Public License version 3 (AGPLv3)]].
#+BEGIN_CENTER
[[https://www.gnu.org/graphics/agplv3-with-text-162x68.png]]
#+END_CENTER

A copy of this license is included in the file [[../../COPYING][COPYING]].
